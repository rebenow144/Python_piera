import csv
import datetime
import os
import logging
import time
import random

# === CONFIGURATION ===
UPDATE_INTERVAL = 1  # seconds (‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)


# === Logging Setup ===
def setup_logging(log_path):
    os.makedirs(os.path.dirname(log_path), exist_ok=True)
    logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(message)s')
    handler = logging.FileHandler(log_path)
    logging.getLogger().addHandler(handler)


# === CSV Utilities ===
def create_csv_filename(date_str):
    return f'PM_{date_str}.csv'


def write_csv_header_if_needed(file, headers):
    if not os.path.exists(file):
        with open(file, mode='w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(headers)
            print(f"[INFO] Header written to {file}")
    else:
        print(f"[INFO] Using existing file: {file}")


def write_to_csv(file, data_row):
    with open(file, mode='a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(data_row)


# === ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ù‡∏∏‡πà‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á) ===
def color_pm_value(label, value):
    try:
        val = float(value)
        if val <= 12:
            color = "\033[92m"  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            level = "‡∏î‡∏µ"
        elif val <= 35.4:
            color = "\033[93m"  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            level = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        elif val <= 55.4:
            color = "\033[33m"  # ‡∏™‡πâ‡∏°
            level = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•"
        elif val <= 150.4:
            color = "\033[91m"  # ‡πÅ‡∏î‡∏á
            level = "‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö"
        elif val <= 250.4:
            color = "\033[95m"  # ‡∏°‡πà‡∏ß‡∏á
            level = "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"
        else:
            color = "\033[41m"  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏î‡∏á
            level = "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏°‡∏≤‡∏Å"
        return f"{color}{label:<7}: {val:.2f} ¬µg/m¬≥ ({level})\033[0m"
    except:
        return f"{label:<7}: {value} ¬µg/m¬≥"


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå) ===
def generate_random_pm_data():
    """
    ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£
    """
    # ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (base values) - ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    base_values = {
        'PC0.1': 5000,  # particles per 0.1L
        'PC0.3': 1500,
        'PC0.5': 800,
        'PC1.0': 400,
        'PC2.5': 200,
        'PC5.0': 100,
        'PC10': 50,
        'PM0.1': 5.0,  # ¬µg/m¬≥
        'PM0.3': 8.0,
        'PM0.5': 12.0,
        'PM1.0': 15.0,
        'PM2.5': 25.0,  # PM2.5 ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        'PM5.0': 35.0,
        'PM10': 45.0
    }

    # ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡πÅ‡∏õ‡∏£ (¬±30% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)
    data = {}
    for key, base_value in base_values.items():
        variation = random.uniform(-0.3, 0.3)  # ¬±30%
        random_value = base_value * (1 + variation)

        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        if random_value < 0:
            random_value = 0

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        if key.startswith('PC'):  # Particle Count
            data[key] = f"{random_value:.0f}"
        else:  # PM values
            data[key] = f"{random_value:.2f}"

    return data


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ ===
def apply_time_variation(data):
    """
    ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á)
    - ‡πÄ‡∏ä‡πâ‡∏≤: ‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
    - ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô: ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å)
    - ‡πÄ‡∏¢‡πá‡∏ô: ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô)
    - ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô: ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥
    """
    current_hour = datetime.datetime.now().hour

    if 6 <= current_hour < 10:  # ‡πÄ‡∏ä‡πâ‡∏≤
        multiplier = 1.0
    elif 10 <= current_hour < 16:  # ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
        multiplier = 1.3
    elif 16 <= current_hour < 20:  # ‡πÄ‡∏¢‡πá‡∏ô (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô)
        multiplier = 1.6
    else:  # ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
        multiplier = 0.7

    adjusted_data = {}
    for key, value in data.items():
        original_value = float(value)
        adjusted_value = original_value * multiplier

        if key.startswith('PC'):
            adjusted_data[key] = f"{adjusted_value:.0f}"
        else:
            adjusted_data[key] = f"{adjusted_value:.2f}"

    return adjusted_data


# === Main Logic ===
def simulate_pm_sensor():
    print("üå´Ô∏è  PM Sensor Simulator ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    print("üìä ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô PM ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö")
    print("‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    print("üîÑ ‡∏Å‡∏î Ctrl + C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\n")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á logs directory ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Python
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "logs")
    log_path = os.path.join(log_dir, "pm_simulator_log.txt")
    setup_logging(log_path)

    all_keys = ['PC0.1', 'PC0.3', 'PC0.5', 'PC1.0', 'PC2.5', 'PC5.0', 'PC10',
                'PM0.1', 'PM0.3', 'PM0.5', 'PM1.0', 'PM2.5', 'PM5.0', 'PM10']
    headers = ["Date", "Time"] + all_keys
    current_date_str = datetime.datetime.now().strftime("%d-%m-%Y")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Python
    script_dir = os.path.dirname(os.path.abspath(__file__))
    filename_local = os.path.join(script_dir, create_csv_filename(current_date_str))
    write_csv_header_if_needed(filename_local, headers)

    last_save_time_str = ""
    data_count = 0

    try:
        while True:
            try:
                now = datetime.datetime.now()
                current_time_str = now.strftime('%H:%M:%S')

                # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                if current_time_str == last_save_time_str:
                    time.sleep(0.1)
                    continue
                last_save_time_str = current_time_str

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                new_date_str = now.strftime("%d-%m-%Y")
                if new_date_str != current_date_str:
                    current_date_str = new_date_str
                    filename_local = os.path.join(script_dir, create_csv_filename(current_date_str))
                    write_csv_header_if_needed(filename_local, headers)

                # ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM
                pm_data = generate_random_pm_data()
                pm_data = apply_time_variation(pm_data)

                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CSV
                row = [now.strftime("%d/%m/%Y"), now.strftime("%H:%M:%S")]
                for key in all_keys:
                    row.append(pm_data.get(key, "0"))

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV
                write_to_csv(filename_local, row)
                data_count += 1

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤
                print(f"\nüìä PM Sensor Data #{data_count} - {current_time_str}")
                print("=" * 70)

                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ PC (Particle Count) ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
                print("üî¢ Particle Count (per 0.1L):")
                pc_keys = ['PC0.1', 'PC0.3', 'PC0.5', 'PC1.0', 'PC2.5', 'PC5.0', 'PC10']
                for key in pc_keys:
                    value = pm_data.get(key, '0')
                    print(f"  {key:<6}: {value:>8} particles")

                print("\nüå´Ô∏è  PM Values (¬µg/m¬≥):")
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ PM ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ
                pm_keys = ['PM0.1', 'PM0.3', 'PM0.5', 'PM1.0', 'PM2.5', 'PM5.0', 'PM10']
                for key in pm_keys:
                    value = pm_data.get(key, '0')
                    if key in ['PM2.5', 'PM10']:  # ‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ä‡πâ‡∏™‡∏µ
                        print(f"  {color_pm_value(key, value)}")
                    else:
                        print(f"  {key:<7}: {float(value):>8.2f} ¬µg/m¬≥")

                print(f"\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à - ‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(filename_local)}")
                print("=" * 70)

                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                time.sleep(UPDATE_INTERVAL)

            except Exception as e:
                error_msg = f"Simulation error: {e}"
                logging.error(error_msg)
                print(f"‚ùå {error_msg}")
                time.sleep(1)

    except KeyboardInterrupt:
        print(f"\nüëã ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        print(f"üìä ‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {data_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {filename_local}")


# === Entry Point ===
if __name__ == "__main__":
    simulate_pm_sensor()